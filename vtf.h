#include "GL/glut.h"
#include "GL/gl.h"

#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

enum VTFImageFormat
{
    IMAGE_FORMAT_NONE = -1,
    IMAGE_FORMAT_RGBA8888 = 0,
    IMAGE_FORMAT_ABGR8888,
    IMAGE_FORMAT_RGB888,
    IMAGE_FORMAT_BGR888,
    IMAGE_FORMAT_RGB565,
    IMAGE_FORMAT_I8,
    IMAGE_FORMAT_IA88,
    IMAGE_FORMAT_P8,
    IMAGE_FORMAT_A8,
    IMAGE_FORMAT_RGB888_BLUESCREEN,
    IMAGE_FORMAT_BGR888_BLUESCREEN,
    IMAGE_FORMAT_ARGB8888,
    IMAGE_FORMAT_BGRA8888,
    IMAGE_FORMAT_DXT1,
    IMAGE_FORMAT_DXT3,
    IMAGE_FORMAT_DXT5,
    IMAGE_FORMAT_BGRX8888,
    IMAGE_FORMAT_BGR565,
    IMAGE_FORMAT_BGRX5551,
    IMAGE_FORMAT_BGRA4444,
    IMAGE_FORMAT_DXT1_ONEBITALPHA,
    IMAGE_FORMAT_BGRA5551,
    IMAGE_FORMAT_UV88,
    IMAGE_FORMAT_UVWQ8888,
    IMAGE_FORMAT_RGBA16161616F,
    IMAGE_FORMAT_RGBA16161616,
    IMAGE_FORMAT_UVLX8888
};

enum VTFImageFlags
{
    // Flags from the *.txt config file
    TEXTUREFLAGS_POINTSAMPLE = 0x00000001,
    TEXTUREFLAGS_TRILINEAR = 0x00000002,
    TEXTUREFLAGS_CLAMPS = 0x00000004,
    TEXTUREFLAGS_CLAMPT = 0x00000008,
    TEXTUREFLAGS_ANISOTROPIC = 0x00000010,
    TEXTUREFLAGS_HINT_DXT5 = 0x00000020,
    TEXTUREFLAGS_PWL_CORRECTED = 0x00000040,
    TEXTUREFLAGS_NORMAL = 0x00000080,
    TEXTUREFLAGS_NOMIP = 0x00000100,
    TEXTUREFLAGS_NOLOD = 0x00000200,
    TEXTUREFLAGS_ALL_MIPS = 0x00000400,
    TEXTUREFLAGS_PROCEDURAL = 0x00000800,

    // These are automatically generated by vtex from the texture data.
    TEXTUREFLAGS_ONEBITALPHA = 0x00001000,
    TEXTUREFLAGS_EIGHTBITALPHA = 0x00002000,

    // Newer flags from the *.txt config file
    TEXTUREFLAGS_ENVMAP = 0x00004000,
    TEXTUREFLAGS_RENDERTARGET = 0x00008000,
    TEXTUREFLAGS_DEPTHRENDERTARGET = 0x00010000,
    TEXTUREFLAGS_NODEBUGOVERRIDE = 0x00020000,
    TEXTUREFLAGS_SINGLECOPY	= 0x00040000,
    TEXTUREFLAGS_PRE_SRGB = 0x00080000,

    TEXTUREFLAGS_UNUSED_00100000 = 0x00100000,
    TEXTUREFLAGS_UNUSED_00200000 = 0x00200000,
    TEXTUREFLAGS_UNUSED_00400000 = 0x00400000,

    TEXTUREFLAGS_NODEPTHBUFFER = 0x00800000,

    TEXTUREFLAGS_UNUSED_01000000 = 0x01000000,

    TEXTUREFLAGS_CLAMPU = 0x02000000,
    TEXTUREFLAGS_VERTEXTEXTURE = 0x04000000,
    TEXTUREFLAGS_SSBUMP = 0x08000000,

    TEXTUREFLAGS_UNUSED_10000000 = 0x10000000,

    TEXTUREFLAGS_BORDER = 0x20000000,

    TEXTUREFLAGS_UNUSED_40000000 = 0x40000000,
    TEXTUREFLAGS_UNUSED_80000000 = 0x80000000,
};

#pragma pack(1)
struct tagVTFHEADER
{
    char Signature[4];		// File signature ("VTF\0"). (or as little-endian integer, 0x00465456)
    unsigned int Version[2];		// version[0].version[1] (currently 7.2).
    unsigned int HeaderSize;		// Size of the header struct (16 byte aligned; currently 80 bytes).

    unsigned short Width;			// Width of the largest mipmap in pixels. Must be a power of 2.
    unsigned short Height;			// Height of the largest mipmap in pixels. Must be a power of 2.
    VTFImageFlags Flags;			// VTF flags.

    unsigned short Frames;			// Number of frames, if animated (1 for no animation).
    unsigned short FirstFrame;		// First frame in animation (0 based).

    unsigned char Padding0[4];		// reflectivity padding (16 byte alignment).
    float Reflectivity[3];	// reflectivity vector.
    unsigned char Padding1[4];		// reflectivity padding (8 byte packing).

    float BumpmapScale;		// Bumpmap scale.

    VTFImageFormat HighResImageFormat;	// High resolution image format.
    unsigned char MipmapCount;		// Number of mipmaps.

    VTFImageFormat LowResImageFormat;	// Low resolution image format (always DXT1).
    unsigned char LowResImageWidth;	// Low resolution image width.
    unsigned char LowResImageHeight;	// Low resolution image height.

    unsigned short Depth;			// Depth of the largest mipmap in pixels.
                        // Must be a power of 2. Can be 0 or 1 for a 2D texture (v7.2 only).
};
#pragma pack()

class VTF_H
{
public:
    VTF_H(const char *fileAddress);
    void OGL_CreateImage();

    unsigned int FileSize;

private:
    tagVTFHEADER *Header; // VTF header

    unsigned int ImageSize;
    GLenum InternalFormat;

    char *CompressedImage;
};
